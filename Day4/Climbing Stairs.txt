https://leetcode.com/problems/climbing-stairs/

class Solution {
public:
    int solveUsingRec(int n) {
        if(n == 0 || n == 1) {
            return 1;
        }
        if(n == 2) {
            return 2;
        }
        
        return solveUsingRec(n - 2) + solveUsingRec(n - 1);

    }
    int solveUsingMemo(int n, vector<int>&dp) {
        if(n == 0 || n == 1) {
            return 1;
        }
        if(n == 2) {
            return 2;
        }
        
        if(dp[n] != -1) {
            return dp[n];
        }

        dp[n] = solveUsingMemo(n - 2, dp) + solveUsingMemo(n - 1, dp);
        return dp[n];
    } 
    int solveUsingTabu(int n) {
        vector<int>dp(n + 1, -1);
        dp[0] = 1;
        dp[1] = 1;
        if(n > 1) {
           dp[2] = 2;
        }
        

        for(int i=3; i<=n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2]; 
        }
        return dp[n];
    }
    int solveUsingTabSO(int n) {
        if(n == 1) {
            return 1;
        }
        if(n == 2) {
            return 2;
        }
         int prev = 1;
         int curr = 2; 
        int next;
        for(int i=3; i<=n; i++) {
           next = curr + prev; 
           prev = curr;
           curr = next;
        }
        return next;
    }
    int climbStairs(int n) {
        // vector<int>dp(n + 1, -1);
        // return solveUsingRec(n);
        // return solveUsingMemo(n, dp);
        // return solveUsingTabu(n);
        return solveUsingTabSO(n);
    }
};