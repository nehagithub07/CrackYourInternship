https://leetcode.com/problems/palindrome-linked-list/

class Solution {
public:
    ListNode* reverseLL(ListNode* prev, ListNode* curr) {
        if(curr == NULL) {
            return prev;
        }
        ListNode* nextNode = curr->next;
        curr->next = prev;
        prev = curr;
        curr = nextNode;

        return reverseLL(prev, curr);
    }
    ListNode* middleNode(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast->next != NULL) {
            fast = fast->next;
            if(fast->next != NULL) {
                fast = fast->next;
                slow = slow->next;
            } 
        }
        return slow;
    }
    bool compareList(ListNode* head1, ListNode* head2) {
        while(head2 != NULL) {
            if(head1->val != head2->val) {
                return false;
            }
            else {
                head1 = head1->next;
                head2 = head2->next;
            }
        }
        return true;
    }
    bool isPalindrome(ListNode* head) {
        ListNode* mid = middleNode(head);
        ListNode* head2 = mid->next;
        mid->next = NULL;
        ListNode* prev = NULL;
        ListNode* curr = head2;
        head2 = reverseLL(prev, curr);
        bool ans = compareList(head, head2);
        return ans;
    }
};