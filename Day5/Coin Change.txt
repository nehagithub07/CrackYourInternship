https://leetcode.com/problems/coin-change/


class Solution {
public:
    int solveUsingRec(vector<int>& coins, int amount) {
        if(amount == 0) {
            return 0;
        }
        if(amount < 0) {
            return INT_MAX;
        }
        int mini = INT_MAX;
        for(int i=0; i<coins.size(); i++) {
            int coin = coins[i];
            if(coin <= amount) {
                int recAns = solveUsingRec(coins, amount - coin);
                if(recAns != INT_MAX) {
                    int ans = 1 + recAns;
                    mini = min(mini, ans);
                }
            }
        }

        return mini;
    }
    int solveUsingMemo(vector<int>& coins, int amount, vector<int>&dp) {
         if(amount == 0) {
            return 0;
        }
        if(amount < 0) {
            return INT_MAX;
        }
        if(dp[amount] !=  -1) {
            return dp[amount];
        }
        int mini = INT_MAX;
        for(int i=0; i<coins.size(); i++) {
            int coin = coins[i];
            if(coin <= amount) {
                int recAns = solveUsingMemo(coins, amount - coin, dp);
                if(recAns != INT_MAX) {
                    int ans = 1 + recAns;
                    mini = min(mini, ans);
                }
            }
        }
        dp[amount] = mini;
        return mini;
    }
    int solveUsingTablu(vector<int>& coins, int amount) {
        int n = amount;
        vector<int>dp(n + 1, INT_MAX);
        dp[0] = 0;
        for(int value=1; value<=amount; value++) {
            int mini = INT_MAX;
            for(int i=0; i<coins.size(); i++) {
               if(value - coins[i] >= 0) {
                    int recAns = dp[value - coins[i]];
                    if(recAns != INT_MAX) {
                        int ans = 1 + recAns;
                        mini = min(mini, ans);
                    }
                }
            }
            dp[value] = mini;
        }
        
        return dp[amount];


    }
    int coinChange(vector<int>& coins, int amount) {
        int n = amount;
        vector<int>dp(n + 1, -1);
        // int ans = solveUsingRec(coins, amount);
        // int ans = solveUsingMemo(coins, amount, dp);
        int ans = solveUsingTablu(coins, amount);
        if(ans == INT_MAX) {
            return -1;
        }
        return ans;
    }
};