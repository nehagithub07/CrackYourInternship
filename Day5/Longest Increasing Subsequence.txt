https://leetcode.com/problems/longest-increasing-subsequence/

class Solution {
public:
    int solveUsingRec(vector<int>&nums, int curr, int prev) {
        if(curr >= nums.size()) {
            return 0;
        }
        int include = 0;
        if(prev == -1 || nums[curr] > nums[prev]) {
            include = 1 + solveUsingRec(nums, curr + 1, curr);
        }
        int exclude = 0 + solveUsingRec(nums, curr + 1, prev);
        int ans = max(include, exclude);
        return ans;
    }
    int solveUsingMemo(vector<int>&nums, int curr, int prev, vector<vector<int>>&dp) {
        if(curr >= nums.size()) {
            return 0;
        }
        if(dp[curr][prev + 1] != -1) {
            return dp[curr][prev + 1];
        }
        int include = 0;
        if(prev == -1 || nums[curr] > nums[prev]) {
            include = 1 + solveUsingMemo(nums, curr + 1, curr, dp);
        }
        int exclude = 0 + solveUsingMemo(nums, curr + 1, prev, dp);
        int ans = max(include, exclude);
        dp[curr][prev + 1] = ans;
        return  dp[curr][prev + 1];
    }
    int lengthOfLIS(vector<int>& nums) {
          int n = nums.size();
        vector<vector<int>> dp(n, vector<int>(n + 1, -1));
        // return solveUsingRec(nums, 0, -1);
        return solveUsingMemo(nums, 0, -1, dp);
    }
};